---
import { getEntries } from "astro:content"
import type { Changelog, Author } from "../schema"

import ArrowBackIcon from "../icons/arrow-back.astro"

type Props = {
    changelog: Changelog & { slug: string }
    goBack?: boolean
}

const { changelog, goBack } =  Astro.props
const authors = await getEntries(changelog.authors) as Array<{ data: Author }>

const date = new Date(changelog.date ?? new Date())

const NavLink = goBack ? "div" : "a"
const Tag = goBack ? "a" : Fragment
---

<script>
    const hrs = document.querySelectorAll('.hr');

    if (hrs.length > 0) {
        const onMouseEnter = () => {
            hrs.forEach(hr => {
                hr.classList.add('hr-focus-in')
                hr.classList.remove('hr-focus-out')
            });
        }

        const onMouseLeave = () => {
            hrs.forEach(hr => {
                hr.classList.add('hr-focus-out')
                hr.classList.remove('hr-focus-in')
            });
        }

        const navLink = document.getElementById('navlink');
        if (navLink) {
            navLink.addEventListener('mouseenter', onMouseEnter);
            navLink.addEventListener('mouseleave', onMouseLeave);
        }
    }
</script>

<div>
    <div>
        <NavLink 
            href={changelog.slug} 
            style="margin-bottom: 0.5rem"
            id="navlink"
        >
            <div class="ch-flex" style="justify-content: space-between; margin-bottom: 2rem;">
                <div style="overflow: hidden;">
                    <Tag href="/">
                        <div class="ch-flex tag">
                            {
                                goBack ? <div style="margin-right: 0.5rem;">
                                    <ArrowBackIcon />
                                </div> : null
                            }
                            <p>{changelog.tag}</p>
                        </div>
                    </Tag>
                    <hr class:list={["hr-focus", goBack ? "force-focus" : "hr"]} style="border-width: 1px;" />
                    <hr class:list={["hr-idle", !goBack && "hr"]} style="border-width: 1px;" />
                </div>
                <p class="ch-text-secondary ch-font-semi-bold date">{changelog.date.getDate()}{' '}{["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dev"][date.getMonth() -1]}, {changelog.date.getFullYear()}</p>
            </div>
            {
                changelog.cover ? <div class="cover">
                    <img 
                        src={changelog.cover.filePath} alt={changelog.cover.alt ?? changelog.title} 
                        class:list={["ch-transition-transform", goBack ? "force-scale" : ""]} />
                </div> : null
            }
        </NavLink>

        <div class="ch-space-y content" style="margin-bottom: 2rem;">
            <h2 class="title">{changelog.title}</h2>
            <slot />
        </div>  

        <div class="ch-flex">
            {
                authors.map(author => 
                    <a href={author.data.github} class="avatar">
                        <img src={author.data.avatarFilePath} />
                    </a>
                )
            }
            <p class:list={["ch-text-secondary",authors.length > 1 && "avatar-label"]} style={`margin-left: ${authors.length > 1 ? "0" : "0.5rem"}`}>
                {authors.length > 1 ? `${authors.length} authors`: authors[0]?.data.displayName}
            </p>
        </div>
    </div>
</div>

<style is:global>
    .content a {
        color: var(--ch-primary-color);
        opacity: 0.8;
        border-bottom: 1px solid var(--ch-primary-color)
    }

    .content pre {
        padding: 0.75rem 1rem;
        border: 1px solid var(--ch-code-border-color);
        border-radius: 0.375rem;
		tab-size: 2;
        overflow: hidden;
    }

    li {
        list-style-position: inside;
    }

    ul li {
        list-style-type: disc;
    }

    ol li {
        list-style-type: decimal;
    }

    h1 {
        font-size: 2em;
        font-weight: 700;
    }

    h2 {
        font-size: 1.5em;
        font-weight: 700;
    }

    h3 {
        font-size: 1.25em;
        font-weight: 700;
    }

    h4 {
        font-size: 1em;
        font-weight: 700;
    }
</style>    

<style>
    .tag:hover div {
        transition-property: transform;
        transition-duration: 200ms;
        transform: translateX(0.1rem);
    }

    .cover {
        overflow: hidden;
        border-radius: 0.25rem;
        margin-bottom: 1.5rem;
    }

    .cover img {
        height: 20rem;
        width: 100%;
        object-fit: cover;
        transition-duration: 500ms
    }

    .hr {
        animation-fill-mode: forwards;
        animation-duration: 500ms;
    }

    .hr-idle {
        border-color: var(--ch-border-secondary-color);
    }

    .force-focus {
        transform: translate(0, 2px) !important;
    }

    .hr-focus {
        border-color: var(--ch-primary-color);
        transform: translate(-100%, 2px);
    }

    .hr-focus.hr-focus-in {
        animation-name: hr-focus-in;
    }

    .hr-idle.hr-focus-in {
        animation-name: hr-idle-out;
    }

    @keyframes hr-focus-in {
        from { transform: translate(-100%, 2px); }
        to { transform: translate(0, 2px); }
    }

    @keyframes hr-idle-out {
        from { transform: translate(0); }
        to { transform: translate(100%); }
    }

    .hr-focus.hr-focus-out {
        animation-name: hr-focus-out
    }

    .hr-idle.hr-focus-out {
        animation-name: hr-idle-in
    }

    @keyframes hr-focus-out {
        from { transform: translate(0, 2px); }
        to { transform: translate(-100%, 2px); }
    }

    @keyframes hr-idle-in {
        from { transform: translate(100%); }
        to { transform: translate(0); }
    }

    a:hover > .cover img, .force-scale {
        transform: scale(1.02);
    }

    .date {
        transition-duration: 200ms;
        transition-property: color;
    }

    a:hover > div > .date {
        color: inherit;
    }

    .title {
        font-weight: 700;
        font-size: var(--ch-text-2xl);
        line-height: 2rem;

        transition-property: color;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 200ms;
    }

    .avatar, .avatar img {
        height: 2.5rem;
        width: 2.5rem;
    }

    .avatar img {
        object-fit: cover;
    }

    .avatar {
        border-radius: 9999px;
        border: 2px solid white;
        cursor: pointer;
        overflow: hidden;
    }

    .avatar-label {
        translate: translate(-0.8rem, 0);
    }

    .avatar + .avatar, .avatar-label {
        transition-property: transform;
        transition-duration: 150ms;
        transform: translate(-0.8rem, 0);
    }

    div:hover > .avatar, div:hover > .avatar-label {
        transform: translate(0, 0);
    }
</style>